{"version":3,"sources":["images/bowser.jpg","images/babymario.jpg","images/DryBowserSmash3.png","images/Morton_SSBU.png","images/roy-kooper.png","images/waluigi.jpg","images/Wario_MP100.png","images/yoshi.png","components/Card.js","components/turn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","isFlipped","flipped","flipDirection","className","onClick","click","src","image","Turns","turn","App","state","message","cards","Bowser","BabyMario","DryBowser","Morton","Roy","Waluigi","Wario","Yoshi","firstFlip","secondFlip","turns","flipHandler","index","newCards","setState","refreshPage","window","location","reload","winningLogic","this","setTimeout","map","card","key","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd3172f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bowser.69f44bd2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/babymario.2a72b74a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/DryBowserSmash3.2c593025.png\";","module.exports = __webpack_public_path__ + \"static/media/Morton_SSBU.511f5f28.png\";","module.exports = __webpack_public_path__ + \"static/media/roy-kooper.ed560b7c.png\";","module.exports = __webpack_public_path__ + \"static/media/waluigi.5ba830fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Wario_MP100.5e22ba9d.png\";","module.exports = __webpack_public_path__ + \"static/media/yoshi.64e02a76.png\";","import React from \"react\";\nimport ReactCardFlip from \"react-card-flip\";\nimport \"../styles/card.css\";\n\nconst Card = props => {\n  return (\n    //ReactCardFlip is a component imported from a third party module.\n    //Check out https://www.npmjs.com/package/react-card-flip if you need more info on usage\n    <ReactCardFlip isFlipped={props.flipped} flipDirection=\"horizontal\">\n      <div className=\"card-front\" onClick={props.click}>\n        <p>click to turn</p>\n      </div>\n\n      <div className=\"card-back\">\n        <img className=\"card-image\" src={props.image} />\n      </div>\n    </ReactCardFlip>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nconst Turns = props => {\n  return (\n    <div>\n      <p>Remaining moves: {props.turn}</p>\n    </div>\n  );\n};\n\nexport default Turns;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport \"./App.css\";\nimport Bowser from \"./images/bowser.jpg\";\nimport BabyMario from \"./images/babymario.jpg\";\nimport DryBowser from \"./images/DryBowserSmash3.png\";\nimport Morton from \"./images/Morton_SSBU.png\";\nimport Roy from \"./images/roy-kooper.png\";\nimport Waluigi from \"./images/waluigi.jpg\";\nimport Wario from \"./images/Wario_MP100.png\";\nimport Yoshi from \"./images/yoshi.png\";\nimport Turns from \"./components/turn\";\n\nclass App extends Component {\n  state = {\n    message: \"match the cards to win the game\",\n    cards: [\n      { flipped: false, image: Bowser },\n      { flipped: false, image: BabyMario },\n      { flipped: false, image: Bowser },\n      { flipped: false, image: BabyMario },\n      { flipped: false, image: DryBowser },\n      { flipped: false, image: Morton },\n      { flipped: false, image: DryBowser },\n      { flipped: false, image: Morton },\n      { flipped: false, image: Roy },\n      { flipped: false, image: Waluigi },\n      { flipped: false, image: Roy },\n      { flipped: false, image: Waluigi },\n      { flipped: false, image: Wario },\n      { flipped: false, image: Yoshi },\n      { flipped: false, image: Wario },\n      { flipped: false, image: Yoshi }\n    ],\n    firstFlip: null,\n    secondFlip: null,\n    turns: 20\n  };\n\n  flipHandler = index => {\n    if (this.state.turns === 0) {\n    } else {\n      if (this.state.firstFlip == null) {\n        let newCards = this.state.cards;\n        newCards[index].flipped = true;\n        this.setState({ cards: newCards, firstFlip: index });\n      } else if (this.state.secondFlip == null) {\n        let newCards = this.state.cards;\n        newCards[index].flipped = true;\n        this.setState({ cards: newCards, secondFlip: index });\n      }\n    }\n  };\n\n  //this is a React Lifecycle method - read the docs\n  componentDidUpdate() {\n    //object destructuring so I don't have to keep typing this.state.\n    const { firstFlip, secondFlip, cards } = this.state;\n\n    if (firstFlip != null && secondFlip != null) {\n      if (cards[firstFlip].image === cards[secondFlip].image) {\n        this.setState({\n          firstFlip: null,\n          secondFlip: null,\n          message: \"its a match\"\n        });\n      } else if (cards[firstFlip].image !== cards[secondFlip].image) {\n        setTimeout(() => {\n          let newCards = this.state.cards;\n          newCards[firstFlip].flipped = false;\n          newCards[secondFlip].flipped = false;\n          this.setState({\n            cards: newCards,\n            firstFlip: null,\n            secondFlip: null,\n            turns: this.state.turns - 1,\n            message: \"These aren't a match\"\n          });\n        }, 1000);\n      }\n    }\n  }\n  refreshPage = () => {\n    window.location.reload(false);\n  };\n\n  winningLogic = () => {\n    //write a function that determines a winner (every card is turned over)\n    //there's an array method called -every- which you might want to look up.\n    //you then need to decided where the best place to call this method is.\n  };\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div className=\"turns\">\n          <Turns turn={this.state.turns} />\n        </div>\n        <div className=\"cards\">\n          {this.state.cards.map((card, index) => {\n            return (\n              <Card\n                key={index}\n                image={card.image}\n                flipped={card.flipped}\n                click={() => this.flipHandler(index)}\n              />\n            );\n          })}\n        </div>\n        <p>{this.state.message}</p>\n        <button className=\"reset\" onClick={this.refreshPage}>\n          Click to reset game\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}